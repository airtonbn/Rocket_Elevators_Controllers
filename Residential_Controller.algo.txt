// The Initialisation
SEQUENCE InitSystem

    SET Battery status is ON 
        FOR EACH column in Battery Columns
            FOR EACH Elevator in Column Elevators
        	END FOR
        END FOR
    SET Elevator status is equal TO idle
    SET Initials Elevators Position is one
    SET DoorClosed is equal TO FALSE

END SEQUENCE

// On listen function
SEQUENCE OnWait

    WHILE Battery status is ON 
    	READ CallButton
	
END SEQUENCE    

// The elevator called
SEQUENCE CallElevator USING direction AND floor

    CALL CallButtonLightOn WITH direction AND floor RETURNING CallButton
    CALL FindNearestElevator WITH direction AND floor RETURNING Elevator
	CALL SendCallRequest WITH floor and Elevator
	CALL IntBtnRequestLightOn WITH FloorRequestedBtn RETURNING FloorRequestBtn
	CALL SendCallRequest WITH CallButton floor AND FloorRequestBtn

END SEQUENCE

SEQUENCE IntBtnRequestFloor USING IntBtnRequestedFloor
	FOR EACH IntBtnRequestFloor
END SEQUENCE

SEQUENCE FloorRequestedBtn

END SEQUENCE

// For turn on the light
SEQUENCE CallButtonLightOn USING direction AND floor

    CALL FindCallButton WITH direction AND floor RETURNING 
    SET CallButton light ON

END SEQUENCE

// For turn off th light
SEQUENCE CallButtonLightOff USING direction AND floor

	CALL FindCallButton WITH direction AND floor RETURNING 
    SET CallButton light OFF

END SEQUENCE

// do FloorRequestBtn
SEQUENCE FloorRequestBtn USING floor

	FOR EACH FloorRequestBtn in FloorRequestBtns
		IF floor IS FloorRequestBtn THEN
			RETURN FloorRequestBtn
		END IF
	END FOR

END SEQUENCE

// For find in which level the button was pushed
SEQUENCE FindCallButton USING direction AND floor

    FOR EACH FindCallButton in FindCallButtons
        IF floor IS CallButton direction AND floor IS equal TO CallButton floor THEN 
            RETURN CallButton
            CALL SendCallRequest
        END IF
    END FOR

END SEQUENCE

// find the nearest elevator 
SEQUENCE FindNearestElevator WITH direction AND floor

    FOR EACH Elevator in Elevators

         IF floor IS Elevator floor AND direction IS Elevator direction AND Elevator status IS STOPPED THEN
            RETURN Elevator
        
        ELSE IF floor IS Elevator floor AND Elevator status IS idle THEN
            RETURN Elevator
    
        ELSE IF floor > Elevator floor AND Elevator status IS Moving  AND Elevator direction IS UP THEN
            CALL FindNearestElevator USING floor AND Cagefloor RETURNING NearestElevator
                RETURN NearestElevator
    
        ELSE IF floor < Elevator floor AND Elevator status IS Moving OR STOPPED AND Elevator direction IS down THEN
            CALL FindNearestElevator USING floor AND Cagefloor RETURNING NearestElevator
                RETURN NearestElevator

		ELSE IF Elevator status IS idle THEN		
			RETURN Elevator

        END IF
    END FOR

	CALL FindLeastBusy RETURNING LeastBusy
	RETURN LeastBusy

END SEQUENCE

SEQUENCE FindNearestElevator USING floor AND Cagefloor AND direction

    COMPUTE RefGAP as difference BETWEEN floor AND Cagefloor
		SET ShortestGAP TO RefGAP
			FOR EACH Elevator in Elevators
				IF Elevator direction IS direction THEN
					COMPUTE GAP as difference BETWEEN floor AND Elevator floor
						IF GAP < ShortestGAP
							SET ShortestGAP TO GAP
						END IF
				END IF
			END FOR

    DETERMINE NearestElevator WITH ShortestGAP
    	RETURN NearestElevator
    
END SEQUENCE

// do FindLeastBusy
SEQUENCE FindLeastBusy

	SET ListLength TO TotalFloor
		FOR EACH Elevator in Elevators
			IF ListLength > Length of Elevator FloorList
				SET ListLength TO Length of Elevator FloorList
			END IF
		END FOR
	DETERMINE LeastBusy WITH ListLength
		RETURN LeastBusy

END SEQUENCE

// do SendCallRequest
SEQUENCE SendCallRequest USING floor AND Elevator

	ADD floor AND FloorList TO Elevator FloorList THEN
	CALL SortList WITH direction AND Elevator FloorList RETURNING ShortedFloorList
	SET Elevator FloorList TO ShortedFloorList

END SEQUENCE

// do SortList
SEQUENCE SortList direction AND FloorList

	IF direction IS UP THEN
		COMPUTE FloorList BY ASCENDING
	ELSE IF direction IS DOWN
	  	COMPUTE FloorList BY DESCENDING
	END IF
	DETERMINE LeastBusy WITH ListLength
SET FloorList TO ShortedFloorList
	RETURN ShortedFloorList

END SEQUENCE

// do OpenDoors
SEQUENCE OpenDoors

	SET door equal TO open
		IF door IS open THEN
			INIT time TO 7 sec THEN
			SET timer to open door in 7 sec
		ELSE IF door IS obstruct THEN
			CALL CloseDoors
		END IF

END SEQUENCE

// do CloseDoors
SEQUENCE CloseDoors

	SET door equal TO close
		IF door IS NOT obstruct THEN
			INIT time TO 7 sec THEN
			SET timer to Close door in 7 sec
		ELSE IF door IS obstruct THEN
			CALL OpenDoors
		END IF

END SEQUENCE

// do MovingStatus
SEQUENCE MovingStatus
	
	SET Elevator Status TO MOVING

END SEQUENCE

// do IdleStatus
SEQUENCE IdleStatus
	
	SET Elevator Status TO IDLE

END SEQUENCE 

// do StoppedStatus
SEQUENCE StoppedStatus
	
	SET Elevator Status TO STOPPED

END SEQUENCE

// do OperateBattery
SEQUENCE OperateBattery
	
	WHILE Battery status IS operationnal
		FOR EACH Elevator in Elevators
			WHILE Elevator FloorList IS NOT EMPTY
				READ NextFloor FROM FloorList
				IF NextFloor IS ElevatorFloor THEN
					CALL CallButton THEN
					CALL OpenDoors THEN
					CALL CallButtonLightOff
				ELSE IF NextFloor < ElevatorFloor THEN
					CALL CallButton THEN
					CALL MovingStatus THEN
					CALL OperateDown THEN
					CALL StoppedStatus THEN
					CALL OpenDoors THEN
					CALL CallButtonLightOff
				ELSE IF NextFloor > ElevatorFloor THEN
					CALL CallButton THEN
					CALL MovingStatus THEN
					CALL OperateUp THEN
					CALL StoppedStatus THEN
					CALL OpenDoors THEN
					CALL CallButtonLightOff
				END IF
			END WHILE
			CALL IdleStatus
		END FOR
	END WHILE

END SEQUENCE

// do OperateDown
SEQUENCE OperateDown USING floor and Elevator floor
	
	FOR EACH Elevator in Elevators
		IF floor < ElevatorFloor
			DECREMENT ElevatorFloor BY 1
			REPEAT UNTIL floor = ElevatorFloor
		END IF
	END FOR

END SEQUENCE

// do OperateUp
SEQUENCE OperateUp USING floor and Elevator floor
	
	FOR EACH Elevator in Elevators
		IF floor > ElevatorFloor
			INCREMENT ElevatorFloor BY 1
			REPEAT UNTIL floor = ElevatoFloor
		END IF
	END FOR
		
END SEQUENCE