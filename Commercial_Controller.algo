'The Initialisation
SEQUENCE InitSystem
	SET FloorList to EMPTY list
    SET Battery status is operationnal 
	SET column1 IS covering floor <= 16
	SET column2 IS covering floor 17 TO floor 33
	SET column3 IS covering floor 34 TO floor 50
	SET column4 IS covering floor 51 TO floor 66
    SET Elevator starting position TO 1
	SET Elevator status TO IDLE
    SET Elevator Doors TO CLOSE
	CAll OperateBattery

END SEQUENCE

'For OperateBattery
SEQUENCE OperateBattery
	
	WHILE Battery status IS operationnal
		FOR EACH Elevator in Elevators
			WHILE Elevator FloorList IS NOT EMPTY
				READ NextFloor FROM FloorList
				IF NextFloor IS ElevatorFloor  AND IDLE THEN
					REMOVE ElevatoFloor TO Elevator FloorList
					CALL OpenDoors THEN
					CALL StoppedStatus
				ELSE IF NextFloor > ElevatorFloor THEN
					CALL MovingStatus THEN
					CAll OperateDown THEN
					CALL StoppedStatus THEN
					CALL OpenDoors THEN
					CALL CallButtonLightOff
				ELSE IF NextFloor < ElevatorFloor THEN
					CALL MovingStatus THEN
					CALL OperateUp THEN
					CALL StoppedStatus THEN
					CALL OpenDoors THEN
					CALL CallButtonLightOff
				END IF
			END WHILE
			CALL IdleStatus
		END FOR
	END WHILE

END SEQUENCE

'For OpenDoors
SEQUENCE OpenDoors

	SET door equal TO open
		IF door IS open THEN
			INIT time TO 7 sec THEN
			SET timer to open door in 7 sec
		ELSE IF door IS obstruct THEN
			CALL CloseDoors
		END IF

END SEQUENCE

'For IntBtnRequestFloor
SEQUENCE IntBtnRequestFloor USING IntBtnRequestedFloor
	FOR EACH IntBtnRequestFloor
END SEQUENCE

'For CloseDoors
SEQUENCE CloseDoors

	SET door equal TO close
		IF door IS NOT obstruct THEN
			INIT time TO 7 sec THEN
			SET timer to Close door in 7 sec
		ELSE IF door IS obstruct THEN
			CALL OpenDoors
		END IF

END SEQUENCE

'For MainPanelFloor
SEQUENCE MainPanelFloor USING RequestFloorBtn AND columns AND FloorList
	
	FOR EACH column IN columns
		IF RequestFloorBtn <= 16 THEN
			SET column TO column1
			CALL CallBtnElevators WITH RequestFloorBtn AND column RETURNING Elevator
			ADD RequestFloorBtn TO Elevator FloorList
			RETURN column
		ELSE IF RequestFloorBtn > 16 AND <= 33 THEN
			SET column TO column2
			CALL CallBtnElevators WITH RequestFloorBtn AND column RETURNING Elevator
			ADD RequestFloorBtn TO FloorList
			RETURN column
		ELSE IF RequestFloorBtn > 33 AND <= 50 THEN
			SET column TO column3
			CALL CallBtnElevators WITH RequestFloorBtn AND column RETURNING Elevator
			ADD RequestFloorBtn TO FloorList
			RETURN column
		ELSE IF RequestFloorBtn > 50 AND <= 66 THEN
			RETURN FloorList
			SET column TO column4
			Call CallBtnElevators WITH RequestFloorBtn AND column RETURNING Elevator
			ADD RequestFloorBtn TO FloorList
			RETURN column
		END IF
	END FOR

END SEQUENCE

'For CallBtnElevators
SEQUENCE CallBtnElevators USING RequestFloorBtn AND column RETURNING Elevator

	CALL BestElevator WITH CageFloor  ElevatorFloor THEN
	CALL MainPanelFloor RETURNING column
	CALL ElevatorPanelDisplay WITH RequestFloorBtn
	RETURN Elevator

END SEQUENCE

'For ElevatorPanelDisplay
SEQUENCE ElevatorPanelDisplay USING RequestFloorBtn

	FOR EACH Elevator in column
		IF RequestFloorBtn IS Pressed THEN
			SHOW RequestFloorBtn Number on screen UNTIL RequestFloorBtn IS equal TO CageFloor
		END IF
	END FOR

END SEQUENCE

'For BestElevator
SEQUENCE BestElevator USING floor

	FOR EACH Elevator IN column
		IF ElevatorFloor status IS IDLE THEN
			RETURN Elevator
		ELSE IF ElevatorFloor < floor and status IS MOVING AND direction IS DOWN THEN
		ELSE IF ElevatorFloor > floor and status IS MOVING AND direction IS DOWN THEN
			CALL SendRequest WITH ElevatorFloor AND FloorList AND status RETURNING LeastBusy
			SET LeastBusy to Elevator
			RETURN Elevator
		END IF
	END FOR

END SEQUENCE

'For SendRequest
SEQUENCE SendRequest USING ElevatorFloor AND FloorList AND status 

	FOR EACH CallButton in column
		IF CallButton < ElevatorFloor AND status IS MOVING THEN
			ADD CallButton TO FloorList
			COMPUTE FloorList BY DESCENDING
		ELSE IF CallButton > ElevatorFloor AND status is MOVING THEN
			ADD CallButton TO FloorList
			COMPUTE FloorList BY DESCENDING
		END IF
		RETURN FloorList
	END FOR
	Call FindLeastBusy WITH FloorList

END SEQUENCE

'For FindLeastBusy
SEQUENCE FindLeastBusy USING FloorList

	SET ListLength TO TotalFloor
		FOR EACH Elevator in column
			IF ListLength < Length of FloorList
				SET ListLength TO Length of FloorList
			END IF
		END FOR
		DETERMINE LeastBusy WITH ListLength
		RETURN LeastBusy

END SEQUENCE

'For MovingStatus
SEQUENCE MovingStatus
	
	SET Elevator Status TO MOVING

END SEQUENCE

'For IdleStatus
SEQUENCE IdleStatus
	
	SET Elevator Status TO IDLE

END SEQUENCE 

'For StoppedStatus
SEQUENCE StoppedStatus
	
	SET Elevator Status TO STOPPED

END SEQUENCE

'For turn on the light
SEQUENCE CallButtonLightOn USING direction AND floor

    CALL FindCallButton WITH direction AND floor RETURNING 
    SET CallButton light ON

END SEQUENCE

'For turn off th light
SEQUENCE CallButtonLightOff USING direction AND floor

	CALL FindCallButton WITH direction AND floor RETURNING 
    SET CallButton light OFF

END SEQUENCE

'For OperateDown
SEQUENCE OperateDown USING floor and Elevator floor
	
	FOR EACH Elevator in Elevators
		IF floor < ElevatorFloor
			DECREMENT ElevatorFloor BY 1
			REPEAT UNTIL floor = ElevatorFloor
		END IF
	END FOR

END SEQUENCE

'For OperateUp
SEQUENCE OperateUp USING floor and Elevator floor
	
	FOR EACH Elevator in Elevators
		IF floor > ElevatorFloor
			INCREMENT ElevatorFloor BY 1
			REPEAT UNTIL floor = ElevatoFloor
		END IF
	END FOR
		
END SEQUENCE

'For MainPanelDisplay
SEQUENCE MainPanelDisplay USING RequestFloorBtn

	FOR EACH Elevator in column
		IF RequestFloorBtn IS Pressed THEN
			SHOW RequestFloorBtn Number AND SET timer TO 2 sec THEN
			SHOW Elevator Name AND SET timer TO 5 sec	
			SHOW NOTHING
		END IF
	END FOR

END SEQUENCE